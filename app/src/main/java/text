Буд-то иду я полесу и тут, откуда не возьмись корова! А следом тайное Общество.. Дело было зимой,похоже в январе= кругом сугробы сквозь которые вылазят
незабудки. Плюс ко всему небо затянуто было тучами. откуда?.. Да еще слышна музыка, типа флейты, из книжный Шкаф.


    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>


    final Queue<Runnable> tasks = new ArrayDeque<>();
    Executor executor;
    Runnable active;
    Runnable findExepts;
    Runnable findFullDot;
    Runnable findRootWords;

        executor = requireActivity().getMainExecutor();

            private void mainProcessing() {
                // Здесь трудоемкие задачи переносятся в дочерний поток.
                Thread thread = new Thread(null, doBackgroundThreadProcessing,
                        "Background");
                thread.start();
            }

            private final Runnable doBackgroundThreadProcessing = new Runnable() {
                public void run() {
                    Log.d(EXEPTLOG, "Поток doBackGround !!!!!! ");
                    backgroundThreadProcessing();
                }
            };
            // Метод, который выполняет какие-то действия в фоновом режиме.
            private void backgroundThreadProcessing() {
                Log.d(EXEPTLOG, "Поток backGround !!!!!! - ");
            }

    public InterpretationFragment(Executor executor){
        this.executor = executor;
    }

        public synchronized void execute(final Runnable r) {
            tasks.add(new Runnable() {
                public void run() {
                    try {
                        r.run();
                    } finally {
                        scheduleNext();
                    }
                }
            });
            if (active == null) {
                scheduleNext();
            }
        }

        protected synchronized void scheduleNext() {
            if ((active = tasks.poll()) != null) {
                executor.execute(active);
            }
        }

        //                            buildText.put(i, fullFindFromText.get(i));
                                }
        //                        else {
        //                            buildText.put(i, value);
        //                        }
                            }
                        }
        //                StringBuilder string = new StringBuilder();
        //                for (int i = 0; i < buildText.size(); i++){
        //                    if (buildText.get(i) != null)
        //                        string.append(" ").append(buildText.get(i));
        //                }


